// Mocks generated by Mockito 5.0.15 from annotations
// in teste_tokenlab/test/presentation/movie/movie_details/movie_details_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:domain/domain/use_case/add_favorite_movie_uc.dart' as _i3;
import 'package:domain/domain/use_case/get_movie_details_uc.dart' as _i2;
import 'package:domain/domain/use_case/remove_favorite_movie_uc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:teste_tokenlab/presentation/movie/movie_details/favorite_movie_result_state.dart'
    as _i8;
import 'package:teste_tokenlab/presentation/movie/movie_details/movie_details_bloc.dart'
    as _i5;
import 'package:teste_tokenlab/presentation/movie/movie_details/movie_details_result_state.dart'
    as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeGetMovieDetailsUC_0 extends _i1.Fake
    implements _i2.GetMovieDetailsUC {}

class _FakeAddFavoriteMovieUC_1 extends _i1.Fake
    implements _i3.AddFavoriteMovieUC {}

class _FakeRemoveFavoriteMovieUC_2 extends _i1.Fake
    implements _i4.RemoveFavoriteMovieUC {}

class _FakeSink_3<T> extends _i1.Fake implements Sink<T> {}

/// A class which mocks [MovieDetailsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailsBloc extends _i1.Mock implements _i5.MovieDetailsBloc {
  MockMovieDetailsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetailsUC get getMovieDetailsUC =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetailsUC),
          returnValue: _FakeGetMovieDetailsUC_0()) as _i2.GetMovieDetailsUC);
  @override
  _i3.AddFavoriteMovieUC get addFavoriteMovieUC =>
      (super.noSuchMethod(Invocation.getter(#addFavoriteMovieUC),
          returnValue: _FakeAddFavoriteMovieUC_1()) as _i3.AddFavoriteMovieUC);
  @override
  _i4.RemoveFavoriteMovieUC get removeFavoriteMovieUC =>
      (super.noSuchMethod(Invocation.getter(#removeFavoriteMovieUC),
              returnValue: _FakeRemoveFavoriteMovieUC_2())
          as _i4.RemoveFavoriteMovieUC);
  @override
  Sink<void> get onTryAgain =>
      (super.noSuchMethod(Invocation.getter(#onTryAgain),
          returnValue: _FakeSink_3<void>()) as Sink<void>);
  @override
  Sink<void> get onFavoriteMovieInput =>
      (super.noSuchMethod(Invocation.getter(#onFavoriteMovieInput),
          returnValue: _FakeSink_3<void>()) as Sink<void>);
  @override
  _i6.Stream<_i7.MovieDetailsResultState> get movieDetailsResultState =>
      (super.noSuchMethod(Invocation.getter(#movieDetailsResultState),
              returnValue: Stream<_i7.MovieDetailsResultState>.empty())
          as _i6.Stream<_i7.MovieDetailsResultState>);
  @override
  _i6.Stream<_i8.FavoriteMovieResultState> get addOrRemoveResultState =>
      (super.noSuchMethod(Invocation.getter(#addOrRemoveResultState),
              returnValue: Stream<_i8.FavoriteMovieResultState>.empty())
          as _i6.Stream<_i8.FavoriteMovieResultState>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
