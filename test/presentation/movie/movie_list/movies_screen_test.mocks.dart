// Mocks generated by Mockito 5.0.15 from annotations
// in teste_tokenlab/test/presentation/movie/movie_list/movies_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:domain/domain/use_case/get_movie_list_uc.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:teste_tokenlab/presentation/movie/movie_list/movies_bloc.dart'
    as _i3;
import 'package:teste_tokenlab/presentation/movie/movie_list/movies_result_state.dart'
    as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeGetMovieListUC_0 extends _i1.Fake implements _i2.GetMovieListUC {}

class _FakeSink_1<T> extends _i1.Fake implements Sink<T> {}

/// A class which mocks [MoviesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesBloc extends _i1.Mock implements _i3.MoviesBloc {
  MockMoviesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieListUC get getMovieListUseCase =>
      (super.noSuchMethod(Invocation.getter(#getMovieListUseCase),
          returnValue: _FakeGetMovieListUC_0()) as _i2.GetMovieListUC);
  @override
  Sink<void> get onTryAgain =>
      (super.noSuchMethod(Invocation.getter(#onTryAgain),
          returnValue: _FakeSink_1<void>()) as Sink<void>);
  @override
  _i4.Stream<_i5.MoviesResultState> get moviesResultState =>
      (super.noSuchMethod(Invocation.getter(#moviesResultState),
              returnValue: Stream<_i5.MoviesResultState>.empty())
          as _i4.Stream<_i5.MoviesResultState>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
